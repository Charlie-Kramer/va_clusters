#
# download data from yelp reviews
# movies?
# drag shows?
#
#https://docs.developer.yelp.com/reference/v3_business_search
#http://nealcaren.github.io/sushi_bars.html
#
# keywords:
#       liked_by_vegetarians
#       gender_neutral_restrooms--> this version
#
#       have tags for LGBTQ friendly, gun friendly?
#       can lookup by FIPS? see data from Harvard
# use geolocations from gazeteer
import requests
import pandas as pd
import json
import time
import config

#df = pd.read_csv('data/www2.census.gov_geo_docs_maps-data_data_gazetteer_2021_Gazetteer_2021_gaz_tracts_51.txt', sep='\t')
df = pd.read_csv('data/2021_gaz_tracts_51.txt', sep='\t')

print(df.head())

Client_ID = config.yelp_client_id
API_Key = config.yelp_client_id

attrib='gender_neutral_restrooms'
latlong = list(zip(df['INTPTLAT'].tolist(),df['INTPTLONG'].tolist(),df["GEOID"].tolist()))

remainders = [51059460100, 51053840400, 51059421200, 51810990100, 51013101601, 51013101602, 51013101603, 51013980200, 51810046002, 51810046006, 51810046009, 51810046010, 51810046011, 51059415100, 51025930301, 51025930302, 51810046013, 51810046014, 51810046015, 51810046016, 51810046017, 51810046018, 51810046019, 51810046020, 51790000200, 51019030601, 51019030602, 51019030603, 51019030604, 51019030605, 51820003400, 51059431500, 51057950800, 51013103700, 51059452000, 51810044004, 51840000101, 51840000102, 51810044007, 51810044008, 51810044005, 51810044006, 51059460200, 51053840500, 51059421300, 51029930101, 51029930102, 51013101701, 51013101703, 51013101704, 51013101705, 51810042000, 51059415200, 51820003500, 51790000300, 51059431601, 51059431602, 51013103800, 51810040000, 51059452101, 51059452102, 51840000201, 51840000202, 51059460300, 51059421400, 51053840601, 51053840602, 51029930201, 51029930202, 51013101801, 51013101803, 51013101804, 51013101805, 51059450100, 51047930101, 51047930103, 51047930104, 51810046204, 51810046206, 51810046207, 51810046211, 51810046212, 51810046213, 51810046214, 51059415300, 51810046216, 51810046217, 51810046219, 51810046220, 51810046221, 51810046222, 51810046223, 51810046224, 51790000401, 51790000402, 51810046225, 51059452200, 51810044201, 51810044202, 51840000301, 51840000302, 51059460400, 51059421500, 51041100106, 51041100107, 51013101900, 51059450200, 51810042201, 51810042202, 51047930202, 51047930203, 51047930204, 51059415401, 51059415402, 51790000500, 51059431801, 51059431802, 51059451000, 51770001800, 51810040200, 51059452301, 51059452302, 51015070100, 51059460501, 51059460503, 51059460504, 51059421600, 51041100206, 51041100208, 51041100209, 51041100210, 51041100211, 51041100212, 51013102001, 51013102002, 51013102003, 51059450300, 51047930300, 51810046400, 51053980100, 51059415500, 51790000600, 51059431900, 51021040100, 51059440100, 51770001900, 51059452400, 51810044401, 51810044402, 51059460600, 51015070200, 51059421701, 51059421702, 51041100300, 51013102100, 51059450400, 51810042400, 51047930400, 51059415600, 51027010100, 51059432000, 51013100100, 51031020101, 51031020102, 51021040200, 51059440201, 51059440202, 51810040403, 51810040404, 51059452501, 51059452502, 51810040405, 51810040406, 51015070300, 51059460701, 51059460702, 51059421800, 51041100403, 51041100404, 51037930101, 51037930102, 51041100407, 51041100405, 51041100409, 51041100406, 51041100410, 51013102200, 51059450500, 51047930501, 51047930502, 51059415700, 51810043005, 51027010200, 51810043006, 51059432100, 51013100200, 51031020200, 51059440300, 51770002100, 51059452600, 51810044600, 51059460800, 51015070400, 51059421900, 51059430101, 51059430102, 51037930200, 51041100505, 51041100506, 51041100507, 51041100508, 51041100509, 51041100510, 51013102301, 51013102302, 51810042600, 51059450601, 51059450602, 51059415800, 51027010300, 51059432201, 51059432202, 51013100300, 51031020300, 51770002200, 51810040600, 51059452700, 51059460900, 51015070500, 51059422000, 51041100600, 51059430201, 51059430202, 51059430203, 51037930300, 51013102400, 51009010505, 51009010506, 51059450701, 51059450702, 51059415900, 51800075103, 51027010400, 51800075104, 51800075105, 51800075106, 51011040101, 51011040102, 51059432300, 51013100400, 51031020401, 51031020402, 51031020403, 51059440501, 51059440503, 51059440504, 51059440505, 51770002301, 51770002302, 51059452801, 51059452802, 51810044805, 51810044806, 51810044807, 51059461000, 51810044808, 51015070601, 51015070602, 51015070603, 51059422101, 51059422102, 51041100701, 51041100702, 51041100704, 51041100705, 51013102500, 51009010600, 51770000300, 51059450800, 51810042801, 51810042802, 51059416000, 51800075202, 51800075203, 51027010500, 51059420100, 51800075205, 51800075206, 51800075207, 51800075208, 51011040200, 51059432401, 51059432402, 51013100500, 51031020500, 51059440600, 51770002400, 51810040801, 51810040802, 51059461100, 51015070701, 51015070702, 51059422201, 51059422202, 51059430400, 51041100804, 51041100805, 51041100806, 51041100807, 51013102600, 51041100812, 51041100814, 51041100815, 51041100816, 51041100817, 51041100818, 51041100819, 51041100820, 51041100821, 51041100822, 51041100823, 51059450900, 51770000400, 51059416100, 51800075301, 51800075302, 51027010600, 51059420201, 51059420202, 51059420203, 51011040300, 51003010100, 51059432500, 51013100600, 51031020600, 51059440701, 51059440702, 51770002501, 51770002502, 51810045000, 51800065100, 51059461201, 51015070801, 51015070802, 51059422301, 51059422302, 51059430500, 51041100902, 51041100907, 51013102701, 51041100910, 51013102702, 51041100912, 51041100915, 51770000500, 51019050101, 51019050102, 51041100919, 51041100920, 51041100921, 51810043002, 51041100922, 51041100923, 51041100924, 51041100926, 51810043004, 51041100928, 51041100929, 51041100930, 51041100931, 51041100932, 51041100933, 51041100934, 51041100935, 51041100936, 51800075401, 51800075402, 51041100937, 51059420300, 51800075404, 51041100938, 51027010700, 51800075405, 51800075406, 51800075407, 51059432600, 51013100700, 51031020700, 51059440800, 51770002600, 51810041002, 51810041003, 51810041004, 51800065200, 51015070900, 51059422401, 51059422402, 51059422403, 51059430600, 51041101003, 51041101004, 51041101007, 51041101008, 51041101009, 51013102802, 51041101011, 51041101012, 51041101013, 51041101014, 51041101015, 51013102803, 51770000601, 51770000602, 51013102804, 51059451100, 51059416300, 51800075502, 51800075503, 51059420400, 51800075504, 51059432701, 51059432702, 51013100800, 51031020800, 51770002700, 51810045200, 51800065301, 51800065302, 51015071000, 51059430700, 51775010100, 51013102901, 51013102903, 51013102904, 51059451200, 51810043200, 51800075601, 51800075602, 51059420501, 51059420502, 51059420503, 51059432800, 51013100900, 51051040100, 51031020900, 51830370300, 51770002800, 51810041200, 51049930101, 51049930102, 51800065401, 51800065402, 51015071101, 51015071102, 51059416200, 51059430801, 51059430802, 51013103000, 51775010200, 51035080100, 51059451300, 51800075701, 51800075702, 51800075703, 51059420600, 51013101000, 51051040200, 51770002900, 51033030100, 51049930200, 51800065500, 51810045405, 51810045407, 51810045408, 51015071201, 51015071202, 51810045412, 51810045414, 51810045415, 51810045420, 51810045421, 51810045422, 51810045424, 51810045425, 51810045426, 51810045427, 51810045428, 51810045429, 51810045430, 51810045431, 51810045432, 51810045433, 51810045434, 51059430901, 51013103100, 51059430902, 51775010300, 51770000900, 51035080200, 51059451400, 51810043400, 51800075801, 51800075802, 51800075803, 51059420700, 51013101100, 51051040300, 51043010101, 51043010102, 51770003000, 51810041400, 51033030201, 51033030202, 51019030101, 51019030103, 51019030104, 51059431001, 51059431002, 51013103200, 51023040100, 51017920101, 51017920102, 51770001000, 51035080300, 51059451501, 51059451502, 51059420800, 51013101200, 51051040400, 51043010200, 51770003100, 51033030300, 51810045601, 51810045603, 51810045605, 51810045606, 51019030202, 51019030203, 51019030204, 51013103300, 51775010501, 51775010502, 51023040200, 51770001100, 51810043600, 51035080401, 51035080402, 51059451601, 51059451602, 51053840101, 51053840102, 51013101300, 51045050100, 51043010300, 51033030400, 51810041600, 51019030300, 51820003100, 51036600100, 51013103401, 51013103403, 51013103404, 51013103405, 51023040301, 51023040303, 51770001200, 51023040304, 51830370100, 51035080501, 51035080502, 51053840200, 51059421001, 51059421002, 51013101401, 51013101402, 51013101405, 51013101406, 51013101407, 51013101408, 51013101409, 51033030501, 51033030502, 51033030503, 51810045801, 51810045803, 51810045805, 51810045806, 51810045807, 51810045808, 51810045809, 51810045810, 51025930100, 51820003200, 51019030401, 51019030403, 51059431300, 51019030404, 51036600200, 51057950600, 51013103501, 51013103503, 51013103504, 51013103505, 51023040401, 51023040402, 51059451800, 51035080601, 51810043800, 51035080603, 51035080604, 51830370200, 51053840300, 51059421101, 51059421102, 51059421103, 51013101501, 51013101502, 51013101503, 51013980100, 51033030600, 51810041801, 51810041803, 51810041804, 51025930201, 51025930202, 51025930203, 51790000100, 51019030501, 51820003300, 51019030503, 51059431400, 51019030504, 51036600300, 51057950700, 51013103601, 51013103602, 51023040501, 51023040502, 51059451900]

latlong2 = [x for x in latlong if x[2] in remainders]

print("latlong2",latlong2)

latlong = latlong2

n_records = 5

headers = {
    "accept": "application/json",
    "Authorization": "Bearer o_SOXmsNme29Tlq0Q3J7y2gp0FchUbewvZkjJWNkb2D6VHojc55ekNy_SOc2rcqf6FgOGpGT-0ld5vb1NkQl75SdfFvGCmxMU45gzz6LPcLghVTXCK1YiwJzMeEaZXYx"
}
print("len latlong",len(latlong))
with open('data/yelp_restrooms.csv','a+') as f:

    for i in range(499,len(latlong)):
        lat = latlong[i][0]
        long = latlong[i][1]
        geoid = latlong[i][2]
        url = f"https://api.yelp.com/v3/businesses/search?latitude={lat}&longitude={long}&attributes={attrib}&sort_by=best_match&limit={n_records}"
        time.sleep(3)
        response = requests.get(url, headers=headers)

        print("i, status code, lat, long, geoid", i, response.status_code, lat, long,geoid)

        if (response.status_code == 200): #if valid response
            response_json = json.loads(response.text)['businesses']

            if len(response_json) > 0: # if at least one business returned
                avgd = 0
                for j in range(len(response_json)):
                    avgd += (response_json[j]["distance"])/len(response_json)
                print("i, lat, long, geoid, avgd", i, lat, long, geoid, avgd)
            else:
                avgd = None
            out_str = str(geoid)+","+str(lat)+","+str(long)+","+str(avgd)+"\n"
            f.write(out_str)

f.close()